#!/usr/bin/env python3

from datetime import date
from textwrap import dedent
import sys
from contextlib import contextmanager

import psycopg2
from psycopg2 import extras

class ExpenseData:

    @contextmanager
    def _database_connect(self):
        connection = psycopg2.connect(dbname='expenses')
        try:
            with connection:
                yield connection
        finally:
            connection.close()
    
    def _display_expenses(self, result):
        for expense in result:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))
    
    def _display_count(self, count):
        if count == 0:
            print("There are no expenses.")
        elif count == 1:
            print("There is one expense.")
        else:
            print(f"There are {count} expenses.")

    def _display_total(self, expenses):
        amount_sum = sum([expense['amount'] for expense in expenses])
        print("-" * 50)
        print(f"Total {str(round(amount_sum, 2)).rjust(25)}")
         

    def add_expense(self, amount, memo):
        with self._database_connect() as connection:
            with connection.cursor() as cursor:
                cursor.execute(
                    """
                        INSERT INTO expenses
                        (amount, memo, created_on)
                        VALUES
                        (%s, %s, %s)
                    """,
                    (amount, memo, date.today())
                )
        
    
    def list_expenses(self):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("SELECT * FROM expenses ORDER BY created_on ASC")
                result = cursor.fetchall()
        
        self._display_count(len(result))
        self._display_expenses(result)
        if len(result) > 1:
            self._display_total(result)
    
    def search_expenses(self, query):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE memo ILIKE %s"
                cursor.execute(sql, (f"%{query}%",))
                result = cursor.fetchall()
        
        self._display_count(result)
        self._display_expenses(result)
        if len(result) > 1:
            self._display_total(result)
    
    def delete_expense(self, id):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE id = %s"
                cursor.execute(sql, (id,))
                result = cursor.fetchone()
                if result:
                    sql = "DELETE FROM expenses WHERE id = %s"
                    cursor.execute(sql, (id,))
                    print(f"The following expense has been deleted:")
                    self._display_expenses([result])
                    return
                print(f"There is no expense with id '{id}'.")
    
    def delete_all_expenses(self):
        with self._database_connect() as connection:
            with connection.cursor() as cursor:
                cursor.execute("DELETE FROM expenses")
                print("All expenses have been deleted.")


class CLI:
    def __init__(self):
        self.application = ExpenseData()

    def run(self, arguments):
        if not arguments:
            command = None
        else:
            command = arguments.pop(0)
        
        match command:
            case "add":
                if len(arguments) < 2:
                    print("You must provide an amount and memo.")
                    return
                amount, memo = arguments
                self.application.add_expense(amount, memo)
            case "list":
                self.application.list_expenses()
            case "search":
                if len(arguments) < 1:
                    print("You must provide a memo.")
                    return
                query = arguments[0]
                self.application.search_expenses(query)
            case "delete":
                if len(arguments) < 1:
                    print("You must provide an expense ID.")
                id = arguments[0]
                self.application.delete_expense(id)
            
            case "clear":
                print("This will THis will remove all expenses. Are you sure? (enter y to confirm)")
                response = input().strip()
                if response.lower() == 'y':
                    self.application.delete_all_expenses()
            case _:
                self.display_help()

    def display_help():
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
        """).strip("\n"))


if __name__ == "__main__":
    cli = CLI()
    cli.run(sys.argv[1:])

